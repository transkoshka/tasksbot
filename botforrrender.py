import os
from dotenv import load_dotenv
load_dotenv()
import asyncio
import requests
import nest_asyncio
from telegram import Update
from telegram.ext import Application, ContextTypes, MessageHandler, filters

# üîê –°–µ–∫—Ä–µ—Ç—ã
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")

# üìú –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_text = update.message.text.strip()

    if message_text.startswith("todo"):
        task_text = message_text.replace("todo", "").strip()
        try:
            response = requests.post(WEBHOOK_URL, json={"task": "–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É: " + task_text})
            if response.status_code == 200:
                await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É!")
            else:
                await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ö–æ–¥: {response.status_code}")
        except Exception as e:
            await update.message.reply_text(f"üö´ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
    else:
        await update.message.reply_text("üëÄ –Ø —Ä–µ–∞–≥–∏—Ä—É—é —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –≤–∏–¥–∞ `#–∑–∞–¥–∞—á–∞ ...`")

# üß† –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫
async def main():
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("‚ú® –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —á–µ—Ä–µ–∑ webhook...")
    await application.run_webhook(
        listen="0.0.0.0",
        port=int(os.environ.get("PORT", 8443)),
        webhook_url=os.environ["RENDER_EXTERNAL_URL"] + "/webhook"
    )

# üöÄ –ü–æ–µ—Ö–∞–ª–∏
if __name__ == '__main__':
    nest_asyncio.apply()
    asyncio.run(main())
