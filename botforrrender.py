import os
import asyncio
import requests
import nest_asyncio
from aiohttp import web
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, ContextTypes, MessageHandler, filters

# üé≠ –ü—Ä–∏—Ç–≤–æ—Ä—è–µ–º—Å—è –∂–∏–≤—ã–º–∏
load_dotenv()
nest_asyncio.apply()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL")
PORT = int(os.environ.get("PORT", 8443))

if not TELEGRAM_TOKEN or not RENDER_EXTERNAL_URL:
    raise RuntimeError("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")


# üìú –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_text = update.message.text.strip()
    print(f"[üì©] –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_text}")

    if message_text.startswith("todo"):
        task_text = message_text.replace("todo", "").strip()
        try:
            response = requests.post(WEBHOOK_URL, json={"task": "–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É: " + task_text})
            if response.status_code == 200:
                await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É!")
            else:
                await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏. –ö–æ–¥: {response.status_code}")
        except Exception as e:
            await update.message.reply_text(f"üö´ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
    else:
        await update.message.reply_text("üëÄ –Ø —Ä–µ–∞–≥–∏—Ä—É—é —Ç–æ–ª—å–∫–æ –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –≤–∏–¥–∞ `todo ...`")


# üåê –§–∞–ª—å—à–∏–≤—ã–π —Å–µ—Ä–≤–µ—Ä, —á—Ç–æ–±—ã Render –ø–æ–≤–µ—Ä–∏–ª
async def start_fake_server():
    async def handle_get(request):
        return web.Response(text="Webhook bot is alive!")

    async def handle_post(request):
        data = await request.text()
        print(f"[üì°] POST –Ω–∞ /webhook: {data}")
        return web.Response(text="OK")

    app = web.Application()
    app.router.add_get("/", handle_get)
    app.router.add_post("/webhook", handle_post)
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", PORT)
    await site.start()
    print(f"[üåç] –§–∞–ª—å—à–∏–≤—ã–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {PORT}")


# üß† –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def start_bot():
    app = Application.builder().token(TELEGRAM_TOKEN).build()
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    webhook_url = f"{RENDER_EXTERNAL_URL}/webhook"
    await app.bot.set_webhook(webhook_url)
    print(f"[üîó] Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

    await app.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        webhook_url=webhook_url
    )


# üöÄ –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    print("[‚öôÔ∏è] –ó–∞–ø—É—Å–∫...")
    await asyncio.gather(
        start_fake_server(),
        start_bot()
    )


if __name__ == "__main__":
    asyncio.run(main())
