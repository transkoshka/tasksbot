import os
import asyncio
import logging
import nest_asyncio
from aiohttp import web
from dotenv import load_dotenv
from telegram import Update
from telegram.ext import Application, ContextTypes, MessageHandler, filters

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
WEBHOOK_URL = os.getenv("RENDER_EXTERNAL_URL") + "/webhook"
GOOGLE_WEBHOOK = os.getenv("WEBHOOK_URL")  # –°—é–¥–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á–∏

# –õ–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# Telegram-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
app = Application.builder().token(TELEGRAM_TOKEN).build()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_text = update.message.text.strip()
    if message_text.startswith("todo"):
        task_text = message_text.replace("todo", "").strip()
        try:
            import requests
            response = requests.post(GOOGLE_WEBHOOK, json={"task": "–¥–æ–±–∞–≤—å –∑–∞–¥–∞—á—É: " + task_text})
            if response.status_code == 200:
                await update.message.reply_text("‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ —Ç–∞–±–ª–∏—Ü—É!")
            else:
                await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞. –ö–æ–¥: {response.status_code}")
        except Exception as e:
            await update.message.reply_text(f"üö´ –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
    else:
        await update.message.reply_text("üëÄ –ò—Å–ø–æ–ª—å–∑—É–π `todo` –≤ –Ω–∞—á–∞–ª–µ –∑–∞–¥–∞—á–∏.")

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ö–µ–Ω–¥–ª–µ—Ä
app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

# AIOHTTP —Å–µ—Ä–≤–µ—Ä
async def telegram_webhook(request):
    data = await request.json()
    update = Update.de_json(data, app.bot)
    await app.process_update(update)
    return web.Response()

async def healthcheck(request):
    return web.Response(text="üîã Bot is alive!")

async def main():
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º aiohttp –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    aio_app = web.Application()
    aio_app.router.add_post("/webhook", telegram_webhook)
    aio_app.router.add_get("/", healthcheck)

    # –ó–∞–ø—É—Å–∫–∞–µ–º webhook Telegram
    await app.bot.set_webhook(WEBHOOK_URL)
    logging.info(f"üîó Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {WEBHOOK_URL}")

    runner = web.AppRunner(aio_app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", int(os.environ.get("PORT", 8443)))
    await site.start()
    logging.info("üöÄ AIOHTTP —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –∏ —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç.")

if __name__ == '__main__':
    nest_asyncio.apply()
    asyncio.run(main())
